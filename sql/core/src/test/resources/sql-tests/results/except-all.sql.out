-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES
    (0), (1), (2), (2), (2), (2), (3), (null), (null) AS tab1(c1)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES
    (1), (2), (2), (3), (5), (5), (null) AS tab2(c1)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW tab3 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (2, 3),
    (2, 2)
    AS tab3(k, v)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW tab4 AS SELECT * FROM VALUES
    (1, 2), 
    (2, 3),
    (2, 2),
    (2, 2),
    (2, 20)
    AS tab4(k, v)
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM tab1
EXCEPT ALL
SELECT * FROM tab2
-- !query schema
struct<c1:int>
-- !query output
0
2
2
NULL


-- !query
SELECT * FROM tab1
MINUS ALL
SELECT * FROM tab2
-- !query schema
struct<c1:int>
-- !query output
0
2
2
NULL


-- !query
SELECT * FROM tab1
EXCEPT ALL
SELECT * FROM tab2 WHERE c1 IS NOT NULL
-- !query schema
struct<c1:int>
-- !query output
0
2
2
NULL
NULL


-- !query
SELECT * FROM tab1 WHERE c1 > 5
EXCEPT ALL
SELECT * FROM tab2
-- !query schema
struct<c1:int>
-- !query output



-- !query
SELECT * FROM tab1
EXCEPT ALL
SELECT * FROM tab2 WHERE c1 > 6
-- !query schema
struct<c1:int>
-- !query output
0
1
2
2
2
2
3
NULL
NULL


-- !query
SELECT * FROM tab1
EXCEPT ALL
SELECT CAST(1 AS BIGINT)
-- !query schema
struct<c1:bigint>
-- !query output
0
2
2
2
2
3
NULL
NULL


-- !query
SELECT * FROM tab1
EXCEPT ALL
SELECT array(1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "LEGACY",
  "messageParameters" : {
    "message" : "ExceptAll can only be performed on tables with the compatible column types. The first column of the second table is array<int> type which is not compatible with int at same column of first table;\n'ExceptAll true\n:- Project [c1#x]\n:  +- SubqueryAlias tab1\n:     +- View (`tab1`, [c1#x])\n:        +- Project [cast(c1#x as int) AS c1#x]\n:           +- Project [c1#x]\n:              +- SubqueryAlias tab1\n:                 +- LocalRelation [c1#x]\n+- Project [array(1) AS array(1)#x]\n   +- OneRowRelation\n"
  }
}


-- !query
SELECT * FROM tab3
EXCEPT ALL
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	3


-- !query
SELECT * FROM tab4
EXCEPT ALL
SELECT * FROM tab3
-- !query schema
struct<k:int,v:int>
-- !query output
2	2
2	20


-- !query
SELECT * FROM tab4
EXCEPT ALL
SELECT * FROM tab3
INTERSECT DISTINCT
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output
2	2
2	20


-- !query
SELECT * FROM tab4
EXCEPT ALL
SELECT * FROM tab3
EXCEPT DISTINCT
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT * FROM tab3
EXCEPT ALL
SELECT * FROM tab4
UNION ALL
SELECT * FROM tab3
EXCEPT DISTINCT
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output
1	3


-- !query
SELECT k FROM tab3
EXCEPT ALL
SELECT k, v FROM tab4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "LEGACY",
  "messageParameters" : {
    "message" : "ExceptAll can only be performed on tables with the same number of columns, but the first table has 1 columns and the second table has 2 columns;\n'ExceptAll true\n:- Project [k#x]\n:  +- SubqueryAlias tab3\n:     +- View (`tab3`, [k#x,v#x])\n:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]\n:           +- Project [k#x, v#x]\n:              +- SubqueryAlias tab3\n:                 +- LocalRelation [k#x, v#x]\n+- Project [k#x, v#x]\n   +- SubqueryAlias tab4\n      +- View (`tab4`, [k#x,v#x])\n         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]\n            +- Project [k#x, v#x]\n               +- SubqueryAlias tab4\n                  +- LocalRelation [k#x, v#x]\n"
  }
}


-- !query
SELECT * FROM tab3
EXCEPT ALL
SELECT * FROM tab4
UNION
SELECT * FROM tab3
EXCEPT DISTINCT
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output
1	3


-- !query
SELECT * FROM tab3
MINUS ALL
SELECT * FROM tab4
UNION
SELECT * FROM tab3
MINUS DISTINCT
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output
1	3


-- !query
SELECT * FROM tab3
EXCEPT ALL
SELECT * FROM tab4
EXCEPT DISTINCT
SELECT * FROM tab3
EXCEPT DISTINCT
SELECT * FROM tab4
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT * 
FROM   (SELECT tab3.k, 
               tab4.v 
        FROM   tab3 
               JOIN tab4 
                 ON tab3.k = tab4.k)
EXCEPT ALL 
SELECT * 
FROM   (SELECT tab3.k, 
               tab4.v 
        FROM   tab3 
               JOIN tab4 
                 ON tab3.k = tab4.k)
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT * 
FROM   (SELECT tab3.k, 
               tab4.v 
        FROM   tab3 
               JOIN tab4 
                 ON tab3.k = tab4.k) 
EXCEPT ALL 
SELECT * 
FROM   (SELECT tab4.v AS k, 
               tab3.k AS v 
        FROM   tab3 
               JOIN tab4 
                 ON tab3.k = tab4.k)
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
1	2
2	20
2	20
2	3
2	3


-- !query
SELECT v FROM tab3 GROUP BY v
EXCEPT ALL
SELECT k FROM tab4 GROUP BY k
-- !query schema
struct<v:int>
-- !query output
3


-- !query
DROP VIEW IF EXISTS tab1
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS tab2
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS tab3
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS tab4
-- !query schema
struct<>
-- !query output

